[gd_scene load_steps=20 format=3 uid="uid://bixm1xmwh4h83"]

[ext_resource type="Theme" uid="uid://dmce53ilrrlem" path="res://main-theme.tres" id="2_665qb"]
[ext_resource type="Script" path="res://scripts/GameState.gd" id="3_6rb05"]
[ext_resource type="PackedScene" uid="uid://dj4cqaqhhkqus" path="res://scenes/game_starting_ui.tscn" id="3_ricfi"]
[ext_resource type="PackedScene" uid="uid://6folc8h7iqa7" path="res://scenes/game_over_screen.tscn" id="4_47ygy"]
[ext_resource type="PackedScene" uid="uid://bc0tcq4wxb8qa" path="res://scenes/level_completed_screen.tscn" id="5_3e7pe"]
[ext_resource type="PackedScene" uid="uid://b1mwgw0sjehek" path="res://scenes/in_game_menu.tscn" id="5_6e5sj"]

[sub_resource type="GDScript" id="GDScript_0ixw8"]
resource_name = "main"
script/source = "extends Node


func _ready() -> void:
	if GlobalSettings.current_level == -1:
		(%GameState as GameState).load_level_config(load(LevelsNamespace.INFINITE_LEVEL_CONFIG_PATH))
	else:
		(%GameState as GameState).load_level_config(
			LevelsNamespace.LEVELS_CONFIGS[GlobalSettings.current_level])
"

[sub_resource type="GDScript" id="GDScript_vuba5"]
resource_name = "drawer"
script/source = "extends Node2D

@onready
var _game_state : GameState = %GameState 

func _ready() -> void:
	get_tree().root.size_changed.connect(_on_viewport_size_changed)
	set_window_scale(GlobalSettings.game_scale)
	_on_viewport_size_changed()
	GlobalSettings.game_scale_changed.connect(func():
		set_window_scale(GlobalSettings.game_scale)
		)

func _process(delta: float) -> void:
	queue_redraw()


func _draw() -> void:
	draw_rect(Rect2(Vector2.ZERO, GlobalSettings.game_config.playing_area_size), GlobalSettings.game_config.playing_area_rect_color, false)
	
	if _game_state.new_blocks_spawning:
		draw_line(Vector2(0, GlobalSettings.game_config.blocks_deadline_height), 
			Vector2(GlobalSettings.game_config.playing_area_size.x, GlobalSettings.game_config.blocks_deadline_height), 
			GlobalSettings.game_config.deadline_color, GlobalSettings.game_config.block_draw_width, true)
	
	draw_circle(_game_state.ball_position, 
		_game_state.ball_radius-GlobalSettings.game_config.ball_draw_width/2.0, 
		GlobalSettings.game_config.ball_color, false, GlobalSettings.game_config.ball_draw_width, true)
	
	draw_rect(_game_state.platform_rect.rect.grow(-GlobalSettings.game_config.platform_draw_width/2.0), 
		GlobalSettings.game_config.platform_color, false, GlobalSettings.game_config.platform_draw_width, false)
	
	for block:ArcanoidBlock in _game_state.blocks:
		draw_rect(block.rect.grow(-GlobalSettings.game_config.block_draw_width/2.0), 
		GlobalSettings.game_config.blocks_colors[min(block.hp-1, len(GlobalSettings.game_config.blocks_colors))], 
		false, GlobalSettings.game_config.block_draw_width, false
		)


func set_window_scale(scale_factor:float) -> void:
	var diff : Vector2 = GlobalSettings.game_config.playing_area_size*scale.x - \\
		GlobalSettings.game_config.playing_area_size*scale_factor
	
	position += diff/2
	scale = Vector2(scale_factor, scale_factor)


func _on_viewport_size_changed() -> void:
	var old_scale_factor : float = scale.x
	set_window_scale(1.0)
	var viewport_center : Vector2 = get_tree().root.size / 2
	var playing_area_center : Vector2 = position + GlobalSettings.game_config.playing_area_size / 2.0
	
	var diff : Vector2 = viewport_center - playing_area_center
	position += diff
	set_window_scale(old_scale_factor)
"

[sub_resource type="GDScript" id="GDScript_ypwq7"]
resource_name = "game_controller"
script/source = "extends Node

@onready
var _game_state : GameState = %GameState

const DAMAGE_TIME_AWATING : float = 1.0 # sec

enum BallCollisionTypes {
	BORDER,
	PLATFORM,
	BLOCK
}

enum DamageReasons {
	BALL_FALLED,
	DEADLINE_REACHED,
}

var chosen_ability : Ability

var _damage_reason : DamageReasons

func _ready() -> void:
	_game_state.state_machine.handle_state(GameState.GAME_STARTING_STATE, _on_state_game_starting)
	_game_state.state_machine.handle_state(GameState.LAUNCHING_BALL_STATE, _on_state_launching_ball)
	_game_state.state_machine.handle_state(GameState.CONTROLLING_BALL_STATE, _on_state_controlling_ball)
	_game_state.state_machine.handle_state(GameState.WAITING_FOR_DAMAGE_STATE, _on_state_waiting_for_damage)
	
	_game_state.state_machine.state = GameState.GAME_STARTING_STATE


func _on_state_game_starting() -> void:
	_game_state.platform_rect.rect.position = Vector2(
		GlobalSettings.game_config.playing_area_size.x/2.0 -_game_state.platform_rect.rect.size.x/2.0, 
		GlobalSettings.game_config.playing_area_size.y-GlobalSettings.game_config.platform_height-_game_state.platform_rect.rect.size.y)
	_place_ball_to_launch_position()


func _on_state_launching_ball() -> void:
	chosen_ability.deactivate()
	_place_ball_to_launch_position()


func _on_state_controlling_ball() -> void:
	pass


func _on_state_waiting_for_damage() -> void:
	var old_color : Color = GlobalSettings.game_config.playing_area_rect_color
	var tween := create_tween()
	tween.tween_property( GlobalSettings.game_config, \"playing_area_rect_color\", 
		Color.RED, DAMAGE_TIME_AWATING*0.2)
	tween.chain().tween_property( GlobalSettings.game_config, \"playing_area_rect_color\",
		old_color, DAMAGE_TIME_AWATING*0.8)


func _process(delta: float) -> void:
	match _game_state.state_machine.state:
		GameState.GAME_STARTING_STATE:
			_process_game_starting(delta)
		GameState.LAUNCHING_BALL_STATE:
			_process_launching_ball(delta)
		GameState.CONTROLLING_BALL_STATE:
			_process_controlling_ball(delta)


func _process_game_starting(delta:float) -> void:
	pass


func _process_launching_ball(delta:float) -> void:
	var ball_relative_position : Vector2 = _game_state.ball_position - _game_state.platform_rect.rect.position
	_handle_platform_movement(delta)
	_game_state.ball_position = _game_state.platform_rect.rect.position + ball_relative_position
	
	if Input.is_action_just_pressed(\"platform_launch_ball\"):
		var launch_direction : Vector2 = (_game_state.ball_position - _game_state.platform_rect.rect.get_center()).normalized()
		_game_state.ball_velocity = launch_direction*_game_state.ball_velocity.length()
		_game_state.state_machine.go_state(GameState.CONTROLLING_BALL_STATE)


func _process_controlling_ball(delta:float) -> void:
	const PLATFORM_HEIGHT : float = 20.0
	
	_handle_platform_movement(delta)
	
	if Input.is_action_just_pressed(\"platform_launch_ball\"):
		if chosen_ability != null:
			chosen_ability.activate()
	
	if Input.is_action_just_released(\"platform_launch_ball\"):
		if chosen_ability != null:
				chosen_ability.deactivate()
	
	_check_collisions(delta)



func _check_collisions(delta:float) -> void:
	var playing_area_limiter_rect := _game_state.playing_area_ball_collide_rect
	var platform_rect := _game_state.platform_rect
	
	var old_ball_position : Vector2 = _game_state.ball_position
	var old_ball_velocity : Vector2 = _game_state.ball_velocity
	
	var frametime : float = 0.0
	var banned_rects_sides := ArcanoidGeometry.RectGroupBannedSides.new()
	while true:
		var collisions_rects : Array[ArcanoidRect] = [];
		collisions_rects.append_array(_game_state.blocks.duplicate())
		collisions_rects.append_array([playing_area_limiter_rect, platform_rect])
		
		var earliest_collision := ArcanoidGeometry.ccd_circle_box_group(
				_game_state.ball_position, _game_state.ball_position+_game_state.ball_velocity*delta,
				 _game_state.ball_radius,
				collisions_rects, banned_rects_sides)
		
		if earliest_collision == null:
			_game_state.ball_position += _game_state.ball_velocity*delta*(1.0-frametime)
			break
		
		_game_state.ball_position += _game_state.ball_velocity*delta*earliest_collision.collision_time
		frametime += earliest_collision.collision_time
		
		if earliest_collision.collision_rect == playing_area_limiter_rect:
			if earliest_collision.collided_rect_side == SIDE_BOTTOM:
				_on_ball_falled()
				return
			
			if (earliest_collision.collided_rect_side == SIDE_TOP or earliest_collision.collided_rect_side == SIDE_BOTTOM):
				_game_state.ball_velocity.y *= -1
			else:
				_game_state.ball_velocity.x *= -1
			banned_rects_sides = ArcanoidGeometry.RectGroupBannedSides.new()
			banned_rects_sides.ban_side(earliest_collision.collision_rect, earliest_collision.collided_rect_side)
		
		elif earliest_collision.collision_rect == platform_rect:
			_game_state.ball_velocity = (_game_state.ball_position-_game_state.platform_rect.rect.get_center()-Vector2(0, 20)).normalized() * _game_state.ball_velocity.length()
			_game_state.ball_position.y = _game_state.platform_rect.rect.position.y-_game_state.ball_radius-2.0
			_on_ball_platform_collision.call_deferred()
			banned_rects_sides = ArcanoidGeometry.RectGroupBannedSides.new()
			banned_rects_sides.ban_side(earliest_collision.collision_rect, earliest_collision.collided_rect_side)
			
		else: # block collide
			if (earliest_collision.collision_rect as ArcanoidBlock).hp <= 1:
				_game_state.blocks.erase(earliest_collision.collision_rect)
			else:
				(earliest_collision.collision_rect as ArcanoidBlock).hp -= 1
			if (earliest_collision.collided_rect_side == SIDE_TOP or earliest_collision.collided_rect_side == SIDE_BOTTOM):
				_game_state.ball_velocity.y *= -1
			else:
				_game_state.ball_velocity.x *= -1
			_game_state.score += 1
			banned_rects_sides = ArcanoidGeometry.RectGroupBannedSides.new()
			banned_rects_sides.ban_side(earliest_collision.collision_rect, earliest_collision.collided_rect_side)
			
			if _game_state.blocks.is_empty():
				_on_all_blocks_broken() 
	
	# hardcoded bugfix, when ball super rarely just ignore walls
	var bounds_rect : Rect2 = Rect2(Vector2.ZERO, GlobalSettings.game_config.playing_area_size)
	if not bounds_rect.has_point(_game_state.ball_position):
		if _game_state.ball_position.x <= 0.0:
			_game_state.ball_position.x = 0.0 + _game_state.ball_radius + 4.0
			_game_state.ball_velocity.x *= -1
		elif  _game_state.ball_position.x >= GlobalSettings.game_config.playing_area_size.x:
			_game_state.ball_position.x = GlobalSettings.game_config.playing_area_size.x - _game_state.ball_radius - 4.0
			_game_state.ball_velocity.x *= -1
		
		if _game_state.ball_position.y <= 0.0:
			_game_state.ball_velocity.y *= -1
			_game_state.ball_position.y = 0.0 + _game_state.ball_radius + 4.0
		elif _game_state.ball_position.y >= GlobalSettings.game_config.playing_area_size.y:
			_on_ball_falled()
		print(\"TRUTEN\")


func _place_ball_to_launch_position() -> void:
	const BALL_PLATFORM_GAP : float = 2.0
	
	_game_state.ball_position = _game_state.platform_rect.rect.position + \\
		Vector2(_game_state.platform_rect.rect.size.x*randf(), -_game_state.ball_radius-BALL_PLATFORM_GAP)


func _handle_platform_movement(delta:float) -> void:
	var platform_speed_input : float = Input.get_axis(\"platform_left\", \"platform_right\")
	
	_game_state.platform_rect.rect.position.x += _game_state.platform_speed*delta*platform_speed_input
	if _game_state.platform_rect.rect.end.x > GlobalSettings.game_config.playing_area_size.x:
		_game_state.platform_rect.rect.position.x = GlobalSettings.game_config.playing_area_size.x-_game_state.platform_rect.rect.size.x
	elif _game_state.platform_rect.rect.position.x < 0.0:
		_game_state.platform_rect.rect.position.x = 0.0



func _check_blocks_deadline() -> bool:
	for rect:ArcanoidRect in _game_state.blocks:
		if rect.rect.end.y > GlobalSettings.game_config.blocks_deadline_height:
			return true
	
	return false


func _spawn_blocks_layer() -> void:
	for rect:ArcanoidRect in _game_state.blocks:
		rect.rect.position.y += GlobalSettings.game_config.block_size.y + GlobalSettings.game_config.block_rows_gap
	
	var spawned_columns : Array[int] = []
	var spawn_count : int = min(_game_state.blocks_spawn_count, GlobalSettings.game_config.block_column_count)
	
	for i:int in spawn_count:
		var column : int = randi()%GlobalSettings.game_config.block_column_count
		while column in spawned_columns: column = randi()%GlobalSettings.game_config.block_column_count
		spawned_columns.append(column)
		var new_block := ArcanoidBlock.new(
			Rect2(Vector2(GlobalSettings.game_config.block_size.x+GlobalSettings.game_config.blocks_columns_gap, 0.0)*column + \\
				Vector2(GlobalSettings.game_config.first_row_offset, GlobalSettings.game_config.top_row_gap), GlobalSettings.game_config.block_size), 1)
		_game_state.blocks.append(new_block)


func _on_ball_platform_collision() -> void:
	if _game_state.new_blocks_spawning:
		_spawn_blocks_layer()
	
	if _check_blocks_deadline():
		_on_blocks_reached_deadline()
	_game_state.ball_velocity *= _game_state.speed_factor
	_game_state.platform_speed *= _game_state.speed_factor


func _on_ball_falled() -> void:
	_damage_reason = DamageReasons.BALL_FALLED
	if await _do_damage():
		return
	_game_state.state_machine.go_state(GameState.LAUNCHING_BALL_STATE)


func _on_all_blocks_broken() -> void:
	if not _game_state.new_blocks_spawning:
		(%Screens as TabContainer).current_tab = \\
			(%Screens as TabContainer).get_tab_idx_from_control(%LevelCompletedScreen)
		(%Screens as Control).show()
		(%LevelCompletedScreen as LevelCompletedScreenAPI).set_has_next_level(
			GlobalSettings.current_level < len(LevelsNamespace.LEVELS_CONFIGS)-1)
		get_tree().paused = true


func _on_blocks_reached_deadline() -> void:
	_damage_reason = DamageReasons.DEADLINE_REACHED
	if await _do_damage():
		return
	
	_game_state.blocks = []
	_spawn_blocks_layer()
	_game_state.state_machine.go_state(GameState.LAUNCHING_BALL_STATE)


# returns true if health expired after damage
func _do_damage() -> bool:
	_game_state.health -= 1
	if chosen_ability != null:
			chosen_ability.deactivate()
	_game_state.state_machine.go_state(GameState.WAITING_FOR_DAMAGE_STATE)
	await get_tree().create_timer(DAMAGE_TIME_AWATING).timeout
	if _game_state.health <= 0:
		_on_health_expired()
		return true
	return false


func _on_health_expired() -> void:
	(%Screens as TabContainer).current_tab = \\
		(%Screens as TabContainer).get_tab_idx_from_control(%GameOverScreen)
	(%Screens as Control).show()
	(%GameOverScreen as GameOverScreenUIApi).set_score(_game_state.score)
	get_tree().paused = true


func _on_game_starging_ui_start_button_pressed(ability:GameAbilitiesNamespace.Types) -> void:
	(%Screens as Control).hide()
	match ability:
		GameAbilitiesNamespace.Types.SLOWTIME:
			chosen_ability = $SlowtimeAbility
		GameAbilitiesNamespace.Types.SHOW_BALL_TRAJECTORY:
			chosen_ability = $BallTrajectroryAbility
		GameAbilitiesNamespace.Types.PLATFORM_ACCELERATION:
			chosen_ability = $PlatformAccelerationAbility
		GameAbilitiesNamespace.Types.PLATFORM_EXTENSION:
			chosen_ability = $PlatformExtensionAbility
		GameAbilitiesNamespace.Types.MAGNETISM:
			chosen_ability = $MagnetismAbility
	
	_game_state.state_machine.go_state(GameState.LAUNCHING_BALL_STATE)


func _on_drawer_draw() -> void:
	if not chosen_ability:
		return
	
	(%Drawer as CanvasItem).draw_rect(_game_state.platform_rect.rect.grow_side(SIDE_RIGHT,
		-_game_state.platform_rect.rect.size.x*(1.0-chosen_ability.relative_balance)),
		GlobalSettings.game_config.platform_color)
"

[sub_resource type="GDScript" id="GDScript_khgdo"]
resource_name = "slowtime_ability"
script/source = "extends Ability


@onready 
var _game_state: GameState = %GameState

@export_range(0.1, 1.0)
var slow_time_value : float = 0.3


func _on_activated() -> void:
	_active = true
	Engine.time_scale = slow_time_value


func _on_deactivated() -> void:
	_active = false
	Engine.time_scale = 1.0
"

[sub_resource type="GDScript" id="GDScript_jnwm8"]
resource_name = "ball_trajectory_ability"
script/source = "extends Ability

@onready 
var _game_state: GameState = %GameState


func _on_drawer_draw() -> void:
	if not _active:
		return
	
	if _game_state.state_machine.state != GameState.CONTROLLING_BALL_STATE:
		return
	
	(%Drawer as CanvasItem).draw_line(_game_state.ball_position, 
		_game_state.ball_position+_game_state.ball_velocity, 
		GlobalSettings.game_config.ball_color, 1.0, true)
"

[sub_resource type="GDScript" id="GDScript_col8f"]
resource_name = "platform_acceleration_ability"
script/source = "extends Ability

@onready 
var _game_state: GameState = %GameState

@export_range(1.0, 5.0)
var acceleration_value : float = 1.1

func _on_activated() -> void:
	_active = true
	_game_state.platform_speed *= acceleration_value


func _on_deactivated() -> void:
	_active = false
	_game_state.platform_speed /= acceleration_value
"

[sub_resource type="GDScript" id="GDScript_1clpx"]
resource_name = "platform_extension_ability"
script/source = "extends Ability

@export_range(0.0, 1_000.0)
var extension_distance : float = 20.0

@onready
var _game_state: GameState = %GameState

func _on_activated() -> void:
	_game_state.platform_rect.rect = _game_state.platform_rect.rect.grow_individual(extension_distance, 0.0, extension_distance, 0.0)


func _on_deactivated() -> void:
	_game_state.platform_rect.rect = _game_state.platform_rect.rect.grow_individual(-extension_distance, 0.0, -extension_distance, 0.0)
"

[sub_resource type="GDScript" id="GDScript_6431r"]
resource_name = "magnetism_ability"
script/source = "extends Ability

@export_range(0.0, 100.0)
var magnetism_power : float = 10.0

@onready 
var _game_state: GameState = %GameState


func _process(delta: float) -> void:
	super(delta)
	if not _active:
		return
	
	var acceleration : Vector2 = \\
		(_game_state.platform_rect.rect.get_center() - _game_state.ball_position).normalized()*magnetism_power
	var speed : float = _game_state.ball_velocity.length()
	_game_state.ball_velocity = (_game_state.ball_velocity+acceleration).normalized()*speed
"

[sub_resource type="GDScript" id="GDScript_hy8dd"]
resource_name = "gui_handler"
script/source = "extends CanvasLayer


func _on_game_over_screen_main_menu_button_pressed() -> void:
	get_tree().paused = false
	get_tree().change_scene_to_file(ScenesNamespace.MAIN_MENU_SCENE_PATH)


func _on_game_over_screen_quit_game_button_pressed() -> void:
	get_tree().quit()


func _on_game_over_screen_restart_button_pressed() -> void:
	get_tree().paused = false
	get_tree().reload_current_scene()


func _on_in_game_menu_new_scale_setted(game_scale: float) -> void:
	GlobalSettings.game_scale = game_scale


func _input(event: InputEvent) -> void:
	if event.is_action_pressed(\"pasue_game\"):
		get_tree().paused = not get_tree().paused
		(%InGameMenu as Control).visible = not (%InGameMenu as Control).visible


func _on_level_completed_screen_next_level_button_pressed() -> void:
	if GlobalSettings.current_level >= len(LevelsNamespace.LEVELS_CONFIGS)-1:
		return
	
	GlobalSettings.current_level += 1
	get_tree().paused = false
	get_tree().reload_current_scene()


func _on_level_completed_screen_quit_game_button_pressed() -> void:
	get_tree().quit()


func _on_level_completed_screen_main_menu_button_pressed() -> void:
	get_tree().paused = false
	get_tree().change_scene_to_file(ScenesNamespace.MAIN_MENU_SCENE_PATH)


func _on_in_game_menu_main_menu_button_pressed() -> void:
	get_tree().paused = false
	get_tree().change_scene_to_file(ScenesNamespace.MAIN_MENU_SCENE_PATH)
"

[sub_resource type="GDScript" id="GDScript_fgexy"]
resource_name = "health_label"
script/source = "extends Label

@onready
var _game_state : GameState = %GameState

func _process(delta: float) -> void:
	text = \"Health: %d/%d\" % [_game_state.health, GlobalSettings.game_config.maximum_health]
"

[sub_resource type="GDScript" id="GDScript_4yrex"]
resource_name = "score_label"
script/source = "extends Label

@onready
var _game_state : GameState = %GameState

func _process(delta: float) -> void:
	text = \"Score: %d\" % _game_state.score
"

[sub_resource type="GDScript" id="GDScript_bbx7j"]
resource_name = "level_label"
script/source = "extends Label


func _ready() -> void:
	var level_string : String = \"\"
	if GlobalSettings.current_level == -1:
		level_string = \"Infinite\"
	else:
		level_string = \"%d\" % (GlobalSettings.current_level+1)
	
	text = \"Level: %s\" % level_string
"

[sub_resource type="Environment" id="Environment_a6df3"]
background_mode = 3
glow_enabled = true
glow_levels/1 = 5.99
glow_levels/2 = 2.71
glow_levels/3 = 2.22
glow_levels/5 = 0.0
glow_normalized = true
glow_intensity = 1.75
glow_strength = 0.64
glow_bloom = 0.39
glow_blend_mode = 0

[node name="ArcanoidGame" type="Node"]
script = SubResource("GDScript_0ixw8")

[node name="Drawer" type="Node2D" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_vuba5")

[node name="GameController" type="Node" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_ypwq7")

[node name="SlowtimeAbility" type="Node" parent="GameController"]
script = SubResource("GDScript_khgdo")
time_capacity = 0.3
time_remains_recovery_scale = 0.25

[node name="BallTrajectroryAbility" type="Node" parent="GameController"]
script = SubResource("GDScript_jnwm8")
time_remains_recovery_scale = 0.25

[node name="PlatformAccelerationAbility" type="Node" parent="GameController"]
script = SubResource("GDScript_col8f")
acceleration_value = 2.0
time_remains_recovery_scale = 0.25

[node name="PlatformExtensionAbility" type="Node" parent="GameController"]
script = SubResource("GDScript_1clpx")
extension_distance = 30.0

[node name="MagnetismAbility" type="Node" parent="GameController"]
script = SubResource("GDScript_6431r")
magnetism_power = 20.0

[node name="GameState" type="Node" parent="."]
unique_name_in_owner = true
script = ExtResource("3_6rb05")

[node name="GUI" type="CanvasLayer" parent="."]
process_mode = 3
layer = 3
script = SubResource("GDScript_hy8dd")

[node name="HUD" type="Control" parent="GUI"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme = ExtResource("2_665qb")

[node name="HealthLabel" type="Label" parent="GUI/HUD"]
layout_mode = 1
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -40.0
offset_bottom = 23.0
grow_horizontal = 0
theme_override_font_sizes/font_size = 32
text = "Health"
script = SubResource("GDScript_fgexy")

[node name="ScoreLabel" type="Label" parent="GUI/HUD"]
layout_mode = 1
offset_right = 40.0
offset_bottom = 38.0
theme_override_font_sizes/font_size = 32
text = "Score"
script = SubResource("GDScript_4yrex")

[node name="LevelLabel" type="Label" parent="GUI/HUD"]
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -20.0
offset_right = 20.0
offset_bottom = 19.0
grow_horizontal = 2
theme_override_font_sizes/font_size = 32
text = "Level"
script = SubResource("GDScript_bbx7j")

[node name="Screens" type="TabContainer" parent="GUI"]
unique_name_in_owner = true
process_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
current_tab = 1
tabs_visible = false

[node name="GameStartingUI" parent="GUI/Screens" instance=ExtResource("3_ricfi")]
unique_name_in_owner = true
process_mode = 1
visible = false
layout_mode = 2
metadata/_tab_index = 0

[node name="GameOverScreen" parent="GUI/Screens" instance=ExtResource("4_47ygy")]
unique_name_in_owner = true
layout_mode = 2
metadata/_tab_index = 1

[node name="LevelCompletedScreen" parent="GUI/Screens" instance=ExtResource("5_3e7pe")]
unique_name_in_owner = true
visible = false
layout_mode = 2
metadata/_tab_index = 2

[node name="InGameMenu" parent="GUI" instance=ExtResource("5_6e5sj")]
unique_name_in_owner = true
process_mode = 3
visible = false

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_a6df3")

[connection signal="draw" from="Drawer" to="GameController" method="_on_drawer_draw"]
[connection signal="draw" from="Drawer" to="GameController/BallTrajectroryAbility" method="_on_drawer_draw"]
[connection signal="start_button_pressed" from="GUI/Screens/GameStartingUI" to="GameController" method="_on_game_starging_ui_start_button_pressed"]
[connection signal="main_menu_button_pressed" from="GUI/Screens/GameOverScreen" to="GUI" method="_on_game_over_screen_main_menu_button_pressed"]
[connection signal="quit_game_button_pressed" from="GUI/Screens/GameOverScreen" to="GUI" method="_on_game_over_screen_quit_game_button_pressed"]
[connection signal="restart_button_pressed" from="GUI/Screens/GameOverScreen" to="GUI" method="_on_game_over_screen_restart_button_pressed"]
[connection signal="main_menu_button_pressed" from="GUI/Screens/LevelCompletedScreen" to="GUI" method="_on_level_completed_screen_main_menu_button_pressed"]
[connection signal="next_level_button_pressed" from="GUI/Screens/LevelCompletedScreen" to="GUI" method="_on_level_completed_screen_next_level_button_pressed"]
[connection signal="quit_game_button_pressed" from="GUI/Screens/LevelCompletedScreen" to="GUI" method="_on_level_completed_screen_quit_game_button_pressed"]
[connection signal="main_menu_button_pressed" from="GUI/InGameMenu" to="GUI" method="_on_in_game_menu_main_menu_button_pressed"]
[connection signal="new_scale_setted" from="GUI/InGameMenu" to="GUI" method="_on_in_game_menu_new_scale_setted"]
